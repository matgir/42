# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    monitoring.txt                                     :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mgirardo <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/03/08 11:24:44 by mgirardo          #+#    #+#              #
#    Updated: 2022/03/08 11:25:20 by mgirardo         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#!/bin/bash

archi=$(uname -a)
# permet d'afficher l'architecture de la machine

phcpu=$(nproc --all)
# nproc permet de donner le nombre  de processeurs dans le systeme --all les donne tous

vcpu=$(grep "processor" /proc/cpuinfo | wc -l)
# permet de trouver la/les lignes ou il y a processor dans le doc | renvoie le nombre de ligne trouve

ttmem=$(free --mega | awk '$1 == "Mem:" {print $2}')
# permet d'obtenir les infos sur la memoire | awk permet de pouvoir analyser un fichier texte en fonction de certaines conditions, ici trouver la ligne ayant pour 1er mot "Mem:" puis afficher le deuxieme mot de cette ligne ici memoire total

umem=$(free --mega | awk '$1 == "Mem:" {print $3}')
# permet d'obtenir les infos sur la memoire | awk permet de pouvoir analyser un fichier texte en fonction de certaines conditions, ici trouver la ligne ayant pour 1er mot "Mem:" puis afficher le troisieme mot de cette ligne ici memoire utiliser

permem=$(free --mega | awk '$1 == "Mem:" {printf("%.2f"), $3/$2*100}')
# permet d'obtenir les infos sur la memoire | awk permet de pouvoir analyser un fichier texte en fonction de certaines conditions, ici trouver la ligne ayant pour 1er mot "Mem:" puis afficher l'operation des 2 et 3 mot de cette ligne pour obtenir le poucentage d'utilisation du disque

ttdisk=$(df -Bg | grep '^/dev/' | grep -v '/boot$' | awk '{ttdisk += $2} END {print ttdisk}')
# affiche l'usage du disque en giga | recupere les ligne qui nous interesse | vire celles que l'on veut pas | creer ttdisk et lui ajoute le volume max de chaques lignes puis l'affiche

udisk=$(df -Bm | grep '^/dev/' | grep -v '/boot$' | awk '{udisk += $3} END {print udisk}')
# affiche l'usage du disque en mega | recupere les ligne qui nous interesse | vire celles que l'on veut pas | creer udisk et lui ajoute le volume utiliser de chaques lignes puis l'affiche

perdisk=$(df -Bm | grep '^/dev/' | grep -v '/boot$' | awk '{ttdisk += $2} {udisk += $3} END {printf("%d"), udisk/ttdisk*100}')
# recupere les deux valeurs precedentes en meme unite pour afficher le pourcentage utiliser du disk

# cpuload= $(top -bn1 | grep '^%Cpu' | cut -c 9- | xargs | awk '{printf("%.1f"), $1 + $3}')
# recupere les procesus en statique | recupere la ligne qui nous interesse | enleve les 9 premier caracteres | transforme chaque element de la ligne utilisable en argument pour awk | calcule et affiche le % de cpu used

lboot=$(who -b | awk '$1 == "system" {print $3 " " $4}')
# recupere le moment de demarage de la machine | a la ligne ou le premier mot est "system" affiche le 3eme et 4eme avec un espace entre

lvmpart=$(lsblk | grep "lvm" | wc -l)

lvmuse=$(if [ $lvmpart -eq 0 ]; then echo no; else echo yes; fi)
# si il y a des lignes de la partition avec lvm alors yes sinon non

tcpconex=$(cat /proc/net/sockstat | awk '$1 == "TCP:" {print $3}')
# recupere les differentes connexions fite sur la machine | sur la ligne TCP: imprime la 3eme variable qui est le nombre de connexion

userlog=$(users | wc -w)
# recupere les user connecter | affiche combien il y en a

ipva=$(hostname -I)
# recupere ladresse ipv4 du serveur

mac=$(ip link show | awk '$1 == "link/ether" {print $2}')
# recupere les adresses ip | imprime la mac

sudocmd=$(journalctl _COMM=sudo | grep COMMAND | wc -l)
# recupere le journal des command en isolant les sudo | recupere les lignes refletant reelement les commande sudo | indiaue le nombre de ligne

wall "	#Architecture: $archi
	#CPU physical : $phcpu
	#vCPU : $vcpu
	#Memory Usage: $umem/${ttmem}MB ($permem%)
	#Disk Usage: $udisk/${ttdisk}Gb ($perdisk%)
	#CPU load: $(top -bn1 | grep '^%Cpu' | cut -c 9- | xargs | awk '{printf("%.1f%%"), $1 + $3}')
	#Last boot: $lboot
	#LVM use: $lvmuse
	#Connexions TCP : $tcpconex ESTABLISHED
	#User log : $userlog
	#Network: IP $ipva ($mac)
	#Sudo : $sudocmd cmd"
