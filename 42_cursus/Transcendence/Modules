• The frontend should be developed using pure vanilla Javascript . However, this
requirement can be altered through the FrontEnd module.
• Your website must be a single-page application. The user should be able to use the
Back and Forward buttons of the browser.
• Your website must be compatible with the latest stable up-to-date version of
Google Chrome .
• The user should encounter no unhandled errors and no warnings when browsing the
website.
• Everything must be launched with a single command line to run an autonomous
container provided by Docker . Example : docker-compose up --build

• Therefore, users must have the ability to participate in a live Pong game against
another player directly on the website. Both players will use the same keyboard.
• A player must be able to play against another player, but it should also be possible
to propose a tournament. This tournament will consist of multiple players who
can take turns playing against each other. You have flexibility in how you implement
the tournament, but it must clearly display who is playing against whom and the
order of the players.
• There must be a matchmaking system: the tournament system organize the
matchmaking of the participants, and announce the next fight.
• All players must adhere to the same rules, which includes having identical paddle
speed. This requirement also applies when using AI, the AI must exhibit the same
speed as a regular player.
• The game itself must be developed in accordance with the default frontend con-
straints (as outlined above), or you may choose to utilize the FrontEnd module,
or you have the option to override it with the Graphics module. While the visual
aesthetics can vary, it must still capture the essence of the original Pong (1972).

• Any password stored in your database, if applicable, must be hashed.
• Your website must be protected against SQL injections/XSS.
• If you have a backend or any other features, it is mandatory to enable an HTTPS
connection for all aspects (Utilize wss instead of ws...).
• You must implement some form of validation for forms and any user input, either
within the base page if no backend is used or on the server side if a backend is
employed.
• Regardless of whether you choose to implement the JWT Security module with
2FA, it’s crucial to prioritize the security of your website. For instance, if you opt
to create an API, ensure your routes are protected. Remember, even if you decide
not to use JWT tokens, securing the site remains essential.

#### Major module: Use a Framework to build the backend.
In this major module, you are required to utilize a specific web framework for your
backend development, and that framework is Django .
You can create the backend without using the constraints of this
module by using the default language/framework (see above in the
mandatory part). However, this module will only be valid if you
follow its requirements.

#### Minor module: Use a database for the backend -and more.
The designated database for all DB instances in your project is PostgreSQL .
This choice guarantees data consistency and compatibility across all project compo-
nents and may be a prerequisite for other modules, such as the backend Frame-
work module.

#### Major module: Standard user management, authentication, users across tournaments.
◦ Users can subscribe to the website in a secure way.
◦ Registered users can log in in a secure way.
◦ Users can select a unique display name to play the tournaments.
◦ Users can update their information.
◦ Users can upload an avatar, with a default option if none is provided.
◦ Users can add others as friends and view their online status.
◦ User profiles display stats, such as wins and losses.
◦ Each user has a Match History including 1v1 games, dates, and relevant
details, accessible to logged-in users.
Be carefull, the management of duplicate usernames/emails is at your
discretion. You must provide a solution that makes sense.

#### Major module: Implementing a remote authentication.
In this major module, the goal is to implement the following authentication system:
OAuth 2.0 authentication with 42 . Key features and objectives include:
Be carefull, the management of duplicate usernames/emails is at your
discretion. You must provide a solution that makes sense.
◦ Integrate the authentication system, allowing users to securely sign in.
◦ Obtain the necessary credentials and permissions from the authority to enable
a secure login.
◦ Implement user-friendly login and authorization flows that adhere to best prac-
tices and security standards.
◦ Ensure the secure exchange of authentication tokens and user information
between the web application and the authentication provider.
This major module aims to get a remote user authentication, providing users with
a secure and convenient way to access the web application.

#### Minor module: Game Customization Options.
In this minor module, the goal is to provide customization options for all available
games on the platform. Key features and objectives include:
◦ Offer customization features, such as power-ups, attacks, or different maps,
that enhance the gameplay experience.
◦ Allow users to choose a default version of the game with basic features if they
prefer a simpler experience.
◦ Ensure that customization options are available and applicable to all games
offered on the platform.
◦ Implement user-friendly settings menus or interfaces for adjusting game pa-
rameters.
◦ Maintain consistency in customization features across all games to provide a
unified user experience.
This module aims to give users the flexibility to tailor their gaming experience
across all available games by providing a variety of customization options while
also offering a default version for those who prefer a straightforward gameplay
experience.

#### Major module: Implement Two-Factor Authentication (2FA) and JWT.
In this major module, the goal is to enhance security and user authentication
by introducing Two-Factor Authentication (2FA) and utilizing JSON Web Tokens
(JWT). Key features and objectives include:
◦ Implement Two-Factor Authentication (2FA) as an additional layer of security
for user accounts, requiring users to provide a secondary verification method,
such as a one-time code, in addition to their password.
◦ Utilize JSON Web Tokens (JWT) as a secure method for authentication and
authorization, ensuring that user sessions and access to resources are managed
securely.
◦ Provide a user-friendly setup process for enabling 2FA, with options for SMS
codes, authenticator apps, or email-based verification.
◦ Ensure that JWT tokens are issued and validated securely to prevent unau-
thorized access to user accounts and sensitive data.
This major module aims to strengthen user account security by offering Two-Factor
Authentication (2FA) and enhancing authentication and authorization through the
use of JSON Web Tokens (JWT).

#### Major module: Implementing Advanced 3D Techniques
This major module, known as "Graphics," is focused on enhancing the visual aspects
of the Pong game. It introduces the utilization of advanced 3D techniques to create
a more immersive gaming experience. Specifically, the Pong game will be developed
using ThreeJS/WebGL to achieve the desired visual effects.
◦ Advanced 3D Graphics: The primary goal of this module is to implement
advanced 3D graphics techniques to elevate the visual quality of the Pong
game. By utilizing ThreeJS/WebGL , we aim to create stunning visual effects
that immerse players in the gaming environment.
◦ Immersive Gameplay: The incorporation of advanced 3D techniques enhances
the overall gameplay experience by providing users with a visually engaging
and captivating Pong game.
◦ Technology Integration: The chosen technology for this module is ThreeJS/WebGL .
These tools will be used to create the 3D graphics, ensuring compatibility and
optimal performance.
This major module aims to revolutionize the Pong game’s visual elements by intro-
ducing advanced 3D techniques. Through the utilization of ThreeJS/WebGL , we
aspire to provide players with an immersive and visually stunning gaming experi-
ence.

#### Minor module: Expanding Browser Compatibility.
In this minor module, the objective is to enhance the compatibility of the web
application by adding support for an additional web browser. Key features and
objectives include:
◦ Extend browser support to include an additional web browser, ensuring that
users can access and use the application seamlessly.
◦ Conduct thorough testing and optimization to ensure that the web application
functions correctly and displays correctly in the newly supported browser.
◦ Address any compatibility issues or rendering discrepancies that may arise in
the added web browser.
◦ Ensure a consistent user experience across all supported browsers, maintaining
usability and functionality.
This minor module aims to broaden the accessibility of the web application by
supporting an additional web browser, providing users with more choices for their
browsing experience.

#### Minor module: Multiple language supports.
In this minor module, the objective is to ensure that your website supports multiple
languages to cater to a diverse user base. Key features and goals include:
◦ Implement support for a minimum of three languages on the website to ac-
commodate a broad audience.
◦ Provide a language switcher or selector that allows users to easily change the
website’s language based on their preferences.
◦ Translate essential website content, such as navigation menus, headings, and
key information, into the supported languages.
◦ Ensure that users can navigate and interact with the website seamlessly, re-
gardless of the selected language.
◦ Consider using language packs or localization libraries to simplify the transla-
tion process and maintain consistency across different languages.
◦ Allow users to set their preferred language as a default choice for subsequent
visits to the website.
This minor module aims to enhance the accessibility and inclusivity of your website
by offering content in multiple languages, making it more user-friendly for a diverse
international audience.