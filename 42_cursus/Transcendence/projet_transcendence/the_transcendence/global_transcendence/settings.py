"""
Django settings for global_transcendence project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-hryap(i1(2^pl$#pg0gz0dht(!rc@2v50%k$r+&teswh7ptolo'
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = bool(os.environ.get("DEBUG", default=0))

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "127.0.0.1").split(",")
# ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # JWT
    'rest_framework_simplejwt', #JWT
    'users', # JWT
    'django.contrib.sites', #User Managment
    'allauth', #User Managment
    'allauth.account', #User Managment
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', #User Managment
]

# Django allauth configurations
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', #User Managment
    'allauth.account.auth_backends.AuthenticationBackend', #User Managment
]

SITE_ID = 1 #User Managment

ACCOUNT_EMAIL_VERIFICATION = "none" #User Managment

ROOT_URLCONF = 'global_transcendence.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'global_transcendence.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": "django.db.backends.postgresql",
        'NAME': os.getenv('DATABASE_NAME', 'polls'),
        'USER': os.getenv('DATABASE_USERNAME', 'myprojectuser'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', 'password'),
        'HOST': os.getenv('DATABASE_HOST', '127.0.0.1'),
        'PORT': os.getenv('DATABASE_PORT', 5432),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# # for JWT pasoim
# REST_FRAMEWORK = {
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',
#     ),
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ],
# }
# for JWT
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication'
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    # Defines how long acces tokens are valid, access tokens are used for
    # authentification in API requests
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # defines how long refresh tokens are valid, refresh tokens are used to
    # get new access tokens when it expires
    'ROTATE_REFRESH_TOKENS': False,
    # If True, new refresh tokens are issued when refreshing access tokens
    'BLACKLIST_AFTER_ROTATION': True,
    # if True, used refresh tokens are added to a blacklist when rotated,
    # prevents reuse of old refresh tokens
    'ALGORITHM': 'HS256',
    # Specifies the algorithm used for token signing (HS256 = HMAC with SHA-256)
    'SIGNING_KEY': SECRET_KEY,
    # the secret key used to sign tokens (same as Django's 'SECRET_KEY) only
    # used for symmetric encryption (HS256)
    'VERIFYING_KEY': None,
    # used for asymmetric encryption (RS256) when verifying tokens, here None
    # because we use HS256 (symmetric encryption)
    'AUTH_HEADER_TYPES': ('mgirardo',),
    # specifies the prefix used in the authorization header,
    # example : 'Authorization: Bearer <token>'
    # can be anything you want : 'hello', 'moilepluscool' ...
    'USER_ID_FIELD': 'id',
    # defines which field in the user model represents the user ID in the token
    'USER_ID_CLAIM': 'user_id',
    # the claim name in the JWT payload(part of the token containing the user data)
    # where the user id is stored
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    # defines the token classes used
    'TOKEN_TYPE_CLAIM': 'token_type',
    # the claim in the JWT that specifies the type of token (access or refresh)
}

AUTH_USER_MODEL = 'users.CustomUser'